# Common profile script to be called by the default Microsoft.PowerShell_profile.ps1
# Copyright DM Tech 2019
#
# Prerequistes:
#   A system or user environment variable $Env:AdminUPN for the relevant domain/cloud service account
#   A system or user environment variable $Env:DevPath with the path to your scripts directory

# Set the start location to the DevPath
Set-Location -Path $env:DevPath

# Add the Modules folder in the $Env:DevPath to the PSModulePath for easy access to custom modules 
$env:PSModulePath += (";" + $env:DevPath + "Modules\")

#### Fancy stored credentials bit ####

# Set the $KeyPath variable to somewhere sensible as required by Functions-PSStoredCredentials.ps1 (per user)
$KeyPath = "$Home\Documents\WindowsPowerShell"

# Dot source the function to enable the Set/Get-StoredCredential cmdlet from $KeyPath (should be turned into a proper module)
. ".\Profile\Functions-PSStoredCredentials.ps1"

# Test to see if admin credentials exist
if (Test-Path "$($KeyPath)\$($env:AdminUPN).cred") {

    # Get-StoredCredential uses the .cred file in $KeyPath generated by New-StoredCredential
    $AdminCredential = (Get-StoredCredential -UserName "$($env:AdminUPN)")
}

#### End fancy stored credentials ####

# Shell variables
$Shell = $Host.UI.RawUI
#$Shell.WindowTitle=""

$BSize = $Shell.BufferSize
$BSize.Width=120
$BSize.Height=3000
$Shell.BufferSize = $BSize

$WSize = $Shell.WindowSize
$WSize.Width=120
$WSize.Height=40
$Shell.WindowSize = $WSize

# Proxy settings to allow access to PowerShell Gallery
$WebClient = New-Object System.Net.WebClient
$WebClient.Proxy.Credentials = [System.Net.CredentialCache]::DefaultNetworkCredentials

# Show a custom message
Write-Host -ForegroundColor 'White' "Running as $env:Username with profile path: $KeyPath `nAdmin credentials set:" $([bool]$AdminCredential) "`n"

# To change the Shell Color
#$shell.BackgroundColor = "Gray"
#$shell.ForegroundColor = "Black"

# To start with a clean Shell
# Clear-Host
