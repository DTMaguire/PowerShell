# Setup PowerShell Profile and Environment Variables for use with a standard user and a Domain Admin account
# Version 1.0 - Copyright DM Tech - 2019
#
### Important! ###
# Log into your machine with your Domain Admin account and run script in an elevated PowerShell session.
#
# This script will:
# - Set the environment variables
#       $Env:DevPath for System
#       $Env:UPNSuffix for System
# - Create subfolders in DevPath for Profile and Modules
# - Copy a common PowerShell profile to launch the shared profile
# - Download and set up the PSStoredCredential function

#######################################################################################################################
## Start Profile Templates ##

# This is a copy of: https://github.com/DTMaguire/PowerShell/blob/master/Profile/Microsoft.PowerShell_profile.ps1
# Placed here for convenience instead of setting up Git or creating a release for a simple block of text

$PSCommonTemplate = @'
# This is the default profile loaded by PowerShell upon launch.
# It's normally located under: C:\Users\(UserName)\Documents\WindowsPowerShell
# - or for PowerShell Core (v6+): C:\Users\(UserName)\Documents\PowerShell

<#
 This file is just used for setting the user-scope environment variable and launching the main script.
 Because I'm using multiple accounts, I just copy this into the location above for each one.
 Customisations are then handled in the shared script.
 I'm using this method instead of a global profile as to not impact any other user accounts.
#>

# UPN of Admin account for connecting to Office 365 with stored credentials

'@

$PSCommonTemplateAppend = @'

# Call the shared script from a common directory - put a shared profile in this location:
. "$Env:DevPath\Profile\Shared-PowerShell_Profile.ps1"

'@

# This is a copy of: https://github.com/DTMaguire/PowerShell/blob/master/Profile/DM-PowerShell_Profile.ps1
# Again, placed here for convenience and can be edited as required

$PSSharedTemplate =  @'
# Common profile script to be called by the default Microsoft.PowerShell_profile.ps1
# Copyright DM Tech 2019
#
# Prerequisites:
#   A system or user environment variable $Env:DevPath with the path to your scripts directory
#   A system or user environment variable $Env:AdminUPN for the relevant domain/cloud service account


# Set the start location to the DevPath
Set-Location -Path $Env:DevPath

# Add the Modules folder in the $Env:DevPath to the PSModulePath for easy access to custom modules 
$Env:PSModulePath += (';' + $Env:DevPath + '\Modules')

#### Fancy stored credentials bit ####

# Set the $KeyPath variable to somewhere sensible as required by Functions-PSStoredCredentials.ps1 (per user)
$KeyPath = "$Home\Documents\PowerShell"

<#
 This checks if the $Env:AdminUPN environment variable exists for specifying an admin username for authentication
 If so, dot-source 'Functions-PSStoredCredentials.ps1' and load the .cred file into a PowerShell credential object
 For more info, see: 
 https://practical365.com/blog/saving-credentials-for-office-365-powershell-scripts-and-scheduled-tasks/
#>

# Test to see if admin credentials exist
if (Test-Path "${KeyPath}\${env:AdminUPN}.cred") {

    # Dot source the function to enable the Get-StoredCredential function from $KeyPath
    . '.\Profile\Functions-PSStoredCredentials.ps1'

    # Get-StoredCredential uses the .cred file in $KeyPath generated by New-StoredCredential
    $AdminCredential = (Get-StoredCredential -UserName $Env:AdminUPN)
}

#### End fancy stored credentials ####

if ([version](Get-CimInstance Win32_OperatingSystem).version -lt [version]6.2) {
    
    # Shell variables to set window and buffer if Windows 7
    $Shell = $Host.UI.RawUI
    #$Shell.WindowTitle=""

    $BSize = $Shell.BufferSize
    $BSize.Width=120
    $BSize.Height=3000
    $Shell.BufferSize = $BSize

    $WSize = $Shell.WindowSize
    $WSize.Width=120
    $WSize.Height=40
    $Shell.WindowSize = $WSize
}

# Proxy settings to allow access to web/remote stuff like Office 365 and the PowerShell Gallery
$WebClient = New-Object System.Net.WebClient
$WebClient.Proxy.Credentials = [System.Net.CredentialCache]::DefaultNetworkCredentials

# Show a custom message
Write-Host -ForegroundColor 'White' `
"Running as $Env:Username with profile path: $KeyPath `nDomain admin credentials loaded:" $([bool]$AdminCredential)"`n"

# To change the Shell Color
#$shell.BackgroundColor = "Gray"
#$shell.ForegroundColor = "Black"

# To start with a clean Shell
# Clear-Host

'@

## End Profile Templates ##
#######################################################################################################################

$Script:SetDevPath = Read-Host `
    -Prompt "`nEnter path for the DevPath environment variable to store your scripts (default is C:\Scripts\PowerShell)"

if ([string]::IsNullOrWhiteSpace($SetDevPath)) {
    $Script:SetDevPath = 'C:\Scripts\PowerShell'
}

if (!(Test-Path -Path $SetDevPath)) {
    New-Item -ItemType 'Directory' -Path $SetDevPath -Force
}

try {
    Set-Location $SetDevPath
    [System.Environment]::SetEnvironmentVariable('DevPath', $SetDevPath, [System.EnvironmentVariableTarget]::Machine)
}
catch {
    Write-Error -Message `
        "Unable to create or set location to $SetDevPath - please check your input and restart the setup script."
    break
}

do {
    $Script:UPNSuffix = (Read-Host -Prompt "`nEnter the UPN suffix (public domain) for cloud services")
    $Script:UserName = (Read-Host "Enter the username of your standard user account")
    $Script:AdminName = (Read-Host "Enter the username of your Domain Admin account (default is $Env:Username)")
    if ([string]::IsNullOrWhiteSpace($Script:AdminName)) {
        $Script:AdminName = $Env:Username
    }
    $Script:AdminUPN = ("$AdminName" + '@' + "$UPNSuffix").ToLower()
} until ((Read-Host -Prompt "Is the UPN `'$AdminUPN`' correct? (y/N)") -eq 'Y')

[System.Environment]::SetEnvironmentVariable('UPNSuffix', $UPNSuffix, [System.EnvironmentVariableTarget]::Machine)

if (!(Test-Path -Path "$SetDevPath\Modules")) {
    New-Item -ItemType 'Directory' -Name 'Modules' -Force
}

$ProfilePath = "$SetDevPath\Profile"

if (!(Test-Path -Path $ProfilePath)) {
    New-Item -ItemType 'Directory' -Name 'Profile' -Force
}
Set-Location $ProfilePath

$PSCommonPath = $ProfilePath + '\Microsoft.PowerShell_profile.ps1'

if ((Test-Path -Path $PSCommonPath -PathType Leaf) -eq $false) {
    New-Item -ItemType File $PSCommonPath -Value $PSCommonTemplate
    Add-Content -Path $PSCommonPath -Value '$env:AdminUPN = ' -NoNewline
    Add-Content -Path $PSCommonPath -Value "`'$AdminUPN`'"e
    Add-Content -Path $PSCommonPath -Value $PSCommonTemplateAppend
}

if ((Test-Path -Path "$ProfilePath\Shared-PowerShell_Profile.ps1" -PathType Leaf) -eq $false) {
    New-Item -ItemType File "$ProfilePath\Shared-PowerShell_Profile.ps1" -Value $PSSharedTemplate    
}

$UserProfile = "C:\Users\$Username"
$AdminProfile = "C:\Users\$AdminName"

$PSCorePath = '\Documents\PowerShell\'
$PSDesktopPath = '\Documents\WindowsPowerShell\'

$UserPSCore = ($UserProfile + $PSCorePath)
$UserPSDesktop = ($UserProfile + $PSDesktopPath)
$AdminPSCore = ($AdminProfile + $PSCorePath)
$AdminPSDesktop = ($AdminProfile + $PSDesktopPath)

$ProfileDestinations = @("$UserPSCore","$UserPSDesktop","$AdminPSCore","$AdminPSDesktop")

Write-Host "`nCopying `'Microsoft.PowerShell_profile.ps1`' to:`n"
Write-Output $ProfileDestinations

foreach ($Destination in $ProfileDestinations) {
    if (!(Test-Path -Path $Destination)) {
        New-Item -ItemType Directory -Force -Path $Destination
    }
    Copy-Item $PSCommonPath -Destination $Destination
}

Write-Host "`nFinished copying common profile files."

if (!((Read-Host -Prompt "`nSetup stored credentials function now? (Y/n)") -eq 'N')) {

    function Set-SecurityProtocols() {
        Write-Host -ForegroundColor 'White' "`nSecurity protocol issue, updating settings."
        Write-Host "Original setting: $([System.Net.ServicePointManager]::SecurityProtocol)" 
        $AvailableProtocols = [string]::join(', ', [Enum]::GetNames([System.Net.SecurityProtocolType])) 
        Write-Host "Available: $AvailableProtocols"

        # Use whatever protocols are available that the server supports 
        try { 
            [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.SecurityProtocolType] $AvailableProtocols
        } catch { 
            [System.Net.ServicePointManager]::SecurityProtocol = "Tls, Tls11, Tls12" 
        } 
    } 

    $StoredFunctionURL = 'https://github.com/cunninghamp/PowerShell-Stored-Credentials/archive/v1.0.0.zip'
    $ZipFile = 'PowerShell-Stored-Credentials-1.0.0.zip'
    $WebClient = New-Object System.Net.WebClient
    $WebClient.Proxy.Credentials = ([System.Net.CredentialCache]::DefaultNetworkCredentials)

    try {
        $WebClient.DownloadFile($StoredFunctionURL,"$ProfilePath\$ZipFile")
        Write-Host -ForegroundColor 'Green' "`nFile downloaded with default network settings.`n"
    }
    catch {
        # Try again with different protocols...
        try {
            Set-SecurityProtocols
            $WebClient.DownloadFile($StoredFunctionURL,"$ProfilePath\$ZipFile")
            Write-Host -ForegroundColor 'Cyan' "`nFile downloaded with updated network settings.`n"   
        }
        catch {
            Write-Error -Message `
            "`nUnable to download `'$ZipFile`' from GitHub. Download the file to your profile path and re-run this script."
        }
    }

    if (Test-Path -Path "$ProfilePath\$ZipFile" -PathType Leaf) {
        Write-Host "Unpacking zip archive."
        Expand-Archive -Path $ZipFile
        Start-Sleep 1
        Copy-Item `
            ".\PowerShell-Stored-Credentials-1.0.0\PowerShell-Stored-Credentials-1.0.0\Functions-PSStoredCredentials.ps1" `
            -Destination $ProfilePath
        Start-Sleep 1
        Remove-Item -Recurse -Path '.\PowerShell-Stored-Credentials-1.0.0' -Confirm:$false -Force
        Remove-Item -Path $ZipFile -Confirm:$false -Force
    } else {
        Write-Warning `
            "`nUnable to expand archive - you can download the file manually and extract .ps1 file to $ProfilePath`n"
    }

    Write-Host -ForegroundColor 'Cyan' `
        "`nPrompting for credentials to save - be sure to use `'$AdminUPN`' as the username!"
    Start-Sleep 1
    $Credential = Get-Credential -Message "Enter your Domain Admin account password" -UserName $AdminUPN
    $Credential.Password | ConvertFrom-SecureString | Out-File "$($AdminPSCore)\$($Credential.Username).cred" -Force
}

$PSTemplate = [Uri]'https://github.com/DTMaguire/PowerShell/tree/master/Profile'
Write-Host -ForegroundColor 'Green' `
    "`nInitial profile setup complete! See: $PSTemplate for example scripts to add to your own profile."
